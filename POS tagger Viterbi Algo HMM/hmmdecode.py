# -*- coding: utf-8 -*-
"""hmmdecode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BaXXvHnSZMGGaNqFUgLj3UTsQyTKIB4o
"""

import sys
import json

with open('hmmmodel.txt', 'r', encoding='utf8') as jfile:
    j=json.load(jfile)

#len(j)

emissionprob=j[0]['emissionprob']
transitionprob=j[1]['transitionprob']
opentags=set(j[2]['opentags'])
uniquewords=set(j[3]['uniquewords'])
uniquetags=set(j[4]['uniquetags'])

#uniquetags


tagtonumdict={}
c = 0
for tag in uniquetags:
    tagtonumdict[c] = tag     #creating a dictionary to associate each tag with a number
    c += 1

lt=len(uniquetags)

#path = '/content/ja_gsd_dev_raw.txt'
path = sys.argv[1]

with open('hmmoutput.txt','w', encoding='utf8') as outf:

  with open(path, 'r', encoding='utf8') as inf:
    pge=inf.readlines()

    for line in pge:
      prevtag='<$s^>'

      words=line.split()

      lw=len(words)

      #creating the required matrices
      viterbi= [ [0]*lw for i in range(lt+1)]
      backpointer=[[0]*lw for i in range(lt+1)]

      #initialization
      for tag in tagtonumdict:

        #getting emission prob value
        empair=words[0] +' '+ tagtonumdict[tag]
        
        if words[0] not in uniquewords:
          if tagtonumdict[tag] in opentags:
            b=1
          else:
            b=0
        
        elif empair not in emissionprob:
          b=0
        
        else:
          b=emissionprob[empair]

        #getting transition prob value
        tranpair=tagtonumdict[tag] +' '+ '<$s^>'
        pi = transitionprob[tranpair]

        viterbi[tag][0]=pi*b
        backpointer[tag][0] = 0


      #recursion step
      for t in range(1,lw):
        for s in tagtonumdict:

          for sprev in tagtonumdict:

            empair=words[t] +' '+ tagtonumdict[s]

            if words[t] not in uniquewords:
                
              if tagtonumdict[s] in opentags:
                b=1
              else:              
                b=0
               
              
              
            elif empair not in emissionprob:
              b=0
            
            else:
              b=emissionprob[empair]

            tranpair=tagtonumdict[s] +' '+tagtonumdict[sprev]
            pi=transitionprob[tranpair]

            if b==0:
                value=0
            else:
                value = viterbi[sprev][t-1] * pi * b

            if value > viterbi[s][t]:
                    viterbi[s][t] = value
                    backpointer[s][t] = sprev


      opt = 0

      for i in tagtonumdict:
          if viterbi[i][lw-1] > viterbi[opt][lw-1]:
              opt = i
      
      path = [words[lw-1] +'/'+ tagtonumdict[opt]]
      
      for t in range(lw-1, 0, -1):
          opt = backpointer[opt][t]
          step = words[t-1]+'/'+tagtonumdict[opt]
          path.insert(0, step)

      st = ''
      for i in path:
        st += i+ ' '
      st = st.strip(' ')
        
      outf.write(st) 
    
      outf.write('\n')

