# -*- coding: utf-8 -*-
"""hmmlearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a1DrPbFSQw1wXeqETJzAreengU3iT-iB
"""

import sys
import json

tagsCount={}
emissions={}   #to find probability of a word having a particular tag
transitions={}   #to keep track of trasitions from one tag to another
uniqueTags=set()
uniquewords=set()

prevtag='<$s^>'
uniqueTags.add(prevtag)
tagsCount[prevtag] =0

classdict={}

#fpath='/content/ja_gsd_train_tagged.txt'
#fpath='/content/test.txt'
fpath = sys.argv[1]


with open(fpath,'r',encoding='utf8') as of:

  pge=of.readlines()
  #print(len(pge))

  for line in pge:
    prevtag='<$s^>'
    tagsCount[prevtag] +=1

    wordAndTag=line.split()
    

    for combos in wordAndTag:
      

      #splitting the pairs into words and tags
      wordAndTagSplit=combos.split('/')
      tag=wordAndTagSplit[-1]
      word='/'.join(wordAndTagSplit[:-1])

      #getting unique tags
      uniqueTags.add(tag)

      #getting unique words
      uniquewords.add(word)

      #getting emmisions
      epair=word +' '+ tag
      if epair not in emissions:
        emissions[epair]=0
      emissions[epair]+=1
      
      #getting count of each tag
      if tag not in tagsCount:
          tagsCount[tag]=0
      tagsCount[tag]+=1

      #getting transitions
      tpair =  tag +' '+ prevtag 
      if tpair not in transitions:
        transitions[tpair]=0
      transitions[tpair]+=1
      prevtag=tag

      #saving unique words for each tag to find open and closed classes
      if tag not in classdict:
        classdict[tag]=set()
      classdict[tag].add(word)

#emission matrix
emissionprob={}

for pair in emissions:
  #print(pair)
  tag=pair.split()[1]

  emissionprob[pair]=emissions[pair]/tagsCount[tag]


#smoothing by making a tag to all other tags except start
#as a start cannot go into start
transitionprob={}
l=len(uniqueTags)

for tprev in uniqueTags:
  for tcur in uniqueTags:
    if tcur != '<$s^>':
      pair=tcur +' '+ tprev

      if pair not in transitions:
        transitions[pair]=0

      transitionprob[pair]=(transitions[pair] + 1)/(tagsCount[tprev] + l)
      #transitionprob[pair]=(transitions[pair])/(tagsCount[tprev])



#getting open class tags
sortedclassdict = sorted(classdict, key=lambda k: len(classdict[k]), reverse=True)

#sortedclassdict =set(sortedclassdict)
sortedclassdict

openclass={'opentags':sortedclassdict[:5]}


l=list(uniquewords)
uwords={'uniquewords':l}


emprob={'emissionprob':emissionprob}
tranprob={'transitionprob':transitionprob}

lt=list(uniqueTags)

#print(len(lt))
lt.remove('<$s^>')
#print(len(lt))
utags={'uniquetags':lt}


#merging all dictionaries in a list to save as json
masterlist=[]
masterlist.append(emprob)
masterlist.append(tranprob)
masterlist.append(openclass)
masterlist.append(uwords)
masterlist.append(utags)

with open('hmmmodel.txt', 'w', encoding='utf8') as jfile:
    json.dump(masterlist, jfile, indent=1, ensure_ascii=False)









